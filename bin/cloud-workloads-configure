#!/usr/bin/env python

import getpass
import netifaces
import os
import paramiko
import socket
import yaml

from cloud_workloads.common.input import get_input, get_yes_no
from cloud_workloads.remote import ssh

INTERFACES_FILE = '/srv/pillar/interfaces.sls'
ROSTER_FILE = '/etc/salt/roster'


def interfaces_list():
    """
    Returns a sorted, filtered list of interfaces on this machine.

    @return list

    """
    filtered = set(['lo'])
    interfaces = [i for i in netifaces.interfaces() if i not in filtered]
    interfaces.sort()
    return interfaces


def choose_interface(label, default='eth0'):
    """
    Prompts the user to choose a network interface corresponding
    to the provided label.

    @param label - String label
    @param default - Default value
    @return String

    """
    interfaces = interfaces_list()
    interface = None
    while interface not in interfaces:
        prompt = "%s interface for minions(default %s): " % (label, default)
        interface = get_input(prompt.capitalize(), default)

        # We can break if interface is in the list
        if interface in interfaces:
            break

        # If interface is not in the list, double check to confirm
        if get_yes_no("Are you sure you wish to use %s as your %s"
                      " interface?(Y/n Default Y): " % (interface, label),
                      default_yes=True):
            break

    return interface


def pillar_interfaces():
    """
    Loads interfaces stored in the interfaces pillar file.

    @returns Tuple - Returns a two element tuple of
        (public interface, private interface)

    """
    interface_public = None
    interface_private = None
    try:
        with open(INTERFACES_FILE, 'r') as f:
            data = yaml.safe_load(f)
        interface_public = data['interfaces']['public']
        interface_private = data['interfaces']['private']
    except KeyError:
        # Maybe do something with this in the future.
        pass
    except Exception:
        pass
    return (interface_public, interface_private)


def save_interfaces(public, private):

    data = {
        'interfaces': {
            'public': public,
            'private': private
        }
    }

    try:
        with open(INTERFACES_FILE, 'w') as f:
            f.write(yaml.dump(data))
    except IOError as e:
        print "Couldnt save interfaces: ", e
        exit()

    print "Saved interfaces to %s" % INTERFACES_FILE


def configure_interfaces(existing_public, existing_private):
    """
    Presents a list of interfaces available on this machine and asks
    the user to choose a "public" and a "private" interface that do
    not have to exist on this machine.

    @TODO - Write pillar interfaces file with the results

    """

    # Choose public and private interfaces
    interfaces = interfaces_list()

    print "Available Interfaces on this machine: ", interfaces
    print ("Note: The interfaces available here might not be the same as "
           "on your minions.\n")

    default = interfaces[0]
    if existing_public:
        default = existing_public
    interface_public = choose_interface('public', default)

    other_interfaces = [i for i in interfaces if i != interface_public]
    if other_interfaces:
        default = other_interfaces[0]
    else:
        default = interfaces[0]

    if existing_private:
        default = existing_private
    interface_private = choose_interface('private', default)

    print "Public: %s\nPrivate: %s\n" % (interface_public, interface_private)
    save_interfaces(interface_public, interface_private)


def ssh_exception(e):
    """
    Attempts to print user friendly messages when something happens
    while ssh'ing.

    @param e - Exception

    """
    if isinstance(e, paramiko.ssh_exception.SSHException):
        print "Could not authenticate"
    elif isinstance(e, socket.timeout):
        print "Connection timed out."
    elif isinstance(e, socket.gaierror):
        print e
    else:
        print e


def get_key_filename(priv='~/.ssh/id_rsa', pub='~/.ssh/id_rsa.pub'):
    """
    Checks that both a private and public rsa key exist. Returns the
    filepath of the private key

    @param priv - String path to private key
    @param pub - String path to public key
    @return String filename to private key or None

    """
    key_files = [priv, pub]
    exists = [os.path.isfile(os.path.expanduser(f)) for f in key_files]
    if all(exists):
        return os.path.expanduser(key_files[0])
    return None


def auth_failed(e):
    """
    Simple check to see if an exception was a paramiko authentication
    exception

    @return - Bool True for yes, False otherwise

    """
    return isinstance(e, paramiko.ssh_exception.SSHException)


def get_minion_info(previous, use_key=None):

    # Get host
    while(True):
        prompt = "Host: "
        host = get_input(prompt, default="")
        if not host:
            print "Invalid host"
        else:
            break

    if (previous):
        # Make copy of previous
        reuse = dict(previous)
        reuse_args = [host, reuse.get('user')]
        reuse_kwargs = {
            'passwd': reuse.get('passwd'),
            'key_filename': reuse.get('priv')
        }
        reuse_sudo, _ = ssh.test_ssh_sudo(*reuse_args, **reuse_kwargs)
        reuse_sftp, _ = ssh.test_sftp(*reuse_args, **reuse_kwargs)
        if reuse_sudo and reuse_sftp:
            print "Reusing previous credentials."
            reuse['host'] = host
            return reuse

    # Get user
    while(True):
        prompt = "User: "
        user = get_input(prompt, default="")
        if not user:
            print "Invalid user"
        else:
            break

    if (use_key):
        # Test attempt with key
        success, e = ssh.test_ssh_with_key(host, user, key_filename=use_key)
        if not success and not auth_failed(e):
            print "Unable to ssh into host: "
            ssh_exception(e)
            return False

    # Default passwd to None
    passwd = None

    if not use_key or use_key and not success:
        prompt = "Password: "
        max_attempts = 3
        attempt = 0
        while attempt < max_attempts:
            passwd = getpass.getpass(prompt)
            success, e = ssh.test_ssh_with_pass(host, user, passwd)
            if not success:
                if auth_failed(e):
                    attempt += 1
                    continue
                else:
                    print "Unable to ssh into host: "
                    ssh_exception(e)
                    return False
            break
        else:
            print "Max password attempts reached."
            return False

    if not success:
        print "Unable to ssh into host: "
        ssh_exception(e)
        return False

    # Test sudo
    test_args = [host, user]
    test_kwargs = {'passwd': passwd, 'key_filename': use_key}
    success, e = ssh.test_ssh_sudo(*test_args, **test_kwargs)
    if not success:
        print "Sudo failed. Need to be able to sudo with nopasswd: "
        ssh_exception(e)
        return False

    # Test sftp
    success, e = ssh.test_sftp(*test_args, **test_kwargs)
    if not success:
        print "Sftp failed: "
        ssh_exception(e)
        return False

    # Assemble minion dictionary that will be saved to yaml
    minion_dict = {
        'host': host,
        'user': user,
        'sudo': True,
        'timeout': 360
    }
    if passwd:
        minion_dict.update(passwd=passwd)
    else:
        minion_dict.update(priv=use_key)
    return minion_dict


def save_roster(roster):
    """
    Saves the roster to ROSTER_FILE after checking for duplicate hosts.

    @param roster - Dict describing the minion roster

    """
    # Remove duplicates
    counter = 1
    hosts = set()
    cleaned_roster = {}
    for m in roster.values():
        if m['host'] not in hosts:
            cleaned_roster['minion-%s' % counter] = m
            counter += 1
            hosts.add(m['host'])

    try:
        with open(ROSTER_FILE, 'w') as f:
            f.write(yaml.dump(cleaned_roster))
    except IOError as e:
        print "Couldn't save the roster: ", e
        exit()

    print "Saved the roster to %s" % ROSTER_FILE


def configure_salt_roster():
    """
    Creates a roster file to use with salt-ssh from user supplied input.
    Users should be able to provide connection info for as many minions
    as they wish.

    """
    use_key = get_key_filename()

    # Build roster information
    roster = {}
    minion_info = {}
    id_ = 1
    while(True):

        print "Collecting for minion %s" % id_
        minion_info = get_minion_info(minion_info, use_key)
        if not minion_info:
            print "Please reenter the connection information."
            continue

        roster.update({'minion%s' % id_: minion_info})

        prompt = "Add another minion?(Y/n default Y): "
        if not get_yes_no(prompt, default_yes=True):
            break
        id_ += 1

    if len(minion_info) > 0:
        save_roster(roster)


if __name__ == "__main__":
    print "\nWelcome to the Cloud Workloads Configuration utility."

    interface_public, interface_private = pillar_interfaces()

    print ("\nCloud Workloads requires minions that are running workloads to "
           "have similar network interfaces. Minions should have a public and "
           "a private interface.")
    if interface_public and interface_private:
        print "Your public interface is configured as %s" % interface_public
        print "Your private interface is configured as %s" % interface_private
        prompt = "Do you want to change this configuration?(y/n Default n): "
        change_interfaces = get_yes_no(prompt)
    else:
        change_interfaces = True

    if change_interfaces:
        configure_interfaces(interface_public, interface_private)

    print ("\nCloud Workloads requires 7 machines by default. Salt-minion "
           "can be deployed and configured for you after collecting some "
           "connection information.")
    configure_salt_roster()
